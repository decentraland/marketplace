// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class WalletChange extends EthereumEvent {
  get params(): WalletChange__Params {
    return new WalletChange__Params(this);
  }
}

export class WalletChange__Params {
  _event: WalletChange;

  constructor(event: WalletChange) {
    this._event = event;
  }

  get wallet(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PreferentialRateChange extends EthereumEvent {
  get params(): PreferentialRateChange__Params {
    return new PreferentialRateChange__Params(this);
  }
}

export class PreferentialRateChange__Params {
  _event: PreferentialRateChange;

  constructor(event: PreferentialRateChange) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class InitialRateChange extends EthereumEvent {
  get params(): InitialRateChange__Params {
    return new InitialRateChange__Params(this);
  }
}

export class InitialRateChange__Params {
  _event: InitialRateChange;

  constructor(event: InitialRateChange) {
    this._event = event;
  }

  get rate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class EndRateChange extends EthereumEvent {
  get params(): EndRateChange__Params {
    return new EndRateChange__Params(this);
  }
}

export class EndRateChange__Params {
  _event: EndRateChange;

  constructor(event: EndRateChange) {
    this._event = event;
  }

  get rate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Finalized extends EthereumEvent {
  get params(): Finalized__Params {
    return new Finalized__Params(this);
  }
}

export class Finalized__Params {
  _event: Finalized;

  constructor(event: Finalized) {
    this._event = event;
  }
}

export class TokenPurchase extends EthereumEvent {
  get params(): TokenPurchase__Params {
    return new TokenPurchase__Params(this);
  }
}

export class TokenPurchase__Params {
  _event: TokenPurchase;

  constructor(event: TokenPurchase) {
    this._event = event;
  }

  get purchaser(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get beneficiary(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MANACrowdsale extends SmartContract {
  static bind(address: Address): MANACrowdsale {
    return new MANACrowdsale("MANACrowdsale", address);
  }

  endBlock(): BigInt {
    let result = super.call("endBlock", []);

    return result[0].toBigInt();
  }

  try_endBlock(): CallResult<BigInt> {
    let result = super.tryCall("endBlock", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  rate(): BigInt {
    let result = super.call("rate", []);

    return result[0].toBigInt();
  }

  try_rate(): CallResult<BigInt> {
    let result = super.tryCall("rate", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  cap(): BigInt {
    let result = super.call("cap", []);

    return result[0].toBigInt();
  }

  try_cap(): CallResult<BigInt> {
    let result = super.tryCall("cap", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  FOUNDATION_SHARE(): BigInt {
    let result = super.call("FOUNDATION_SHARE", []);

    return result[0].toBigInt();
  }

  try_FOUNDATION_SHARE(): CallResult<BigInt> {
    let result = super.tryCall("FOUNDATION_SHARE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  isWhitelisted(buyer: Address): boolean {
    let result = super.call("isWhitelisted", [
      EthereumValue.fromAddress(buyer)
    ]);

    return result[0].toBoolean();
  }

  try_isWhitelisted(buyer: Address): CallResult<boolean> {
    let result = super.tryCall("isWhitelisted", [
      EthereumValue.fromAddress(buyer)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  weiRaised(): BigInt {
    let result = super.call("weiRaised", []);

    return result[0].toBigInt();
  }

  try_weiRaised(): CallResult<BigInt> {
    let result = super.tryCall("weiRaised", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  startBlock(): BigInt {
    let result = super.call("startBlock", []);

    return result[0].toBigInt();
  }

  try_startBlock(): CallResult<BigInt> {
    let result = super.tryCall("startBlock", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  wallet(): Address {
    let result = super.call("wallet", []);

    return result[0].toAddress();
  }

  try_wallet(): CallResult<Address> {
    let result = super.tryCall("wallet", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  preferentialRate(): BigInt {
    let result = super.call("preferentialRate", []);

    return result[0].toBigInt();
  }

  try_preferentialRate(): CallResult<BigInt> {
    let result = super.tryCall("preferentialRate", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  continuousSale(): Address {
    let result = super.call("continuousSale", []);

    return result[0].toAddress();
  }

  try_continuousSale(): CallResult<Address> {
    let result = super.tryCall("continuousSale", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  buyerRate(param0: Address): BigInt {
    let result = super.call("buyerRate", [EthereumValue.fromAddress(param0)]);

    return result[0].toBigInt();
  }

  try_buyerRate(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("buyerRate", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  isFinalized(): boolean {
    let result = super.call("isFinalized", []);

    return result[0].toBoolean();
  }

  try_isFinalized(): CallResult<boolean> {
    let result = super.tryCall("isFinalized", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", []);

    return result[0].toAddress();
  }

  try_owner(): CallResult<Address> {
    let result = super.tryCall("owner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  whitelist(param0: Address): boolean {
    let result = super.call("whitelist", [EthereumValue.fromAddress(param0)]);

    return result[0].toBoolean();
  }

  try_whitelist(param0: Address): CallResult<boolean> {
    let result = super.tryCall("whitelist", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  initialRate(): BigInt {
    let result = super.call("initialRate", []);

    return result[0].toBigInt();
  }

  try_initialRate(): CallResult<BigInt> {
    let result = super.tryCall("initialRate", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  TOTAL_SHARE(): BigInt {
    let result = super.call("TOTAL_SHARE", []);

    return result[0].toBigInt();
  }

  try_TOTAL_SHARE(): CallResult<BigInt> {
    let result = super.tryCall("TOTAL_SHARE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  endRate(): BigInt {
    let result = super.call("endRate", []);

    return result[0].toBigInt();
  }

  try_endRate(): CallResult<BigInt> {
    let result = super.tryCall("endRate", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  CROWDSALE_SHARE(): BigInt {
    let result = super.call("CROWDSALE_SHARE", []);

    return result[0].toBigInt();
  }

  try_CROWDSALE_SHARE(): CallResult<BigInt> {
    let result = super.tryCall("CROWDSALE_SHARE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  hasEnded(): boolean {
    let result = super.call("hasEnded", []);

    return result[0].toBoolean();
  }

  try_hasEnded(): CallResult<boolean> {
    let result = super.tryCall("hasEnded", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  token(): Address {
    let result = super.call("token", []);

    return result[0].toAddress();
  }

  try_token(): CallResult<Address> {
    let result = super.tryCall("token", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }
}

export class PauseTokenCall extends EthereumCall {
  get inputs(): PauseTokenCall__Inputs {
    return new PauseTokenCall__Inputs(this);
  }

  get outputs(): PauseTokenCall__Outputs {
    return new PauseTokenCall__Outputs(this);
  }
}

export class PauseTokenCall__Inputs {
  _call: PauseTokenCall;

  constructor(call: PauseTokenCall) {
    this._call = call;
  }
}

export class PauseTokenCall__Outputs {
  _call: PauseTokenCall;

  constructor(call: PauseTokenCall) {
    this._call = call;
  }
}

export class SetBuyerRateCall extends EthereumCall {
  get inputs(): SetBuyerRateCall__Inputs {
    return new SetBuyerRateCall__Inputs(this);
  }

  get outputs(): SetBuyerRateCall__Outputs {
    return new SetBuyerRateCall__Outputs(this);
  }
}

export class SetBuyerRateCall__Inputs {
  _call: SetBuyerRateCall;

  constructor(call: SetBuyerRateCall) {
    this._call = call;
  }

  get buyer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get rate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetBuyerRateCall__Outputs {
  _call: SetBuyerRateCall;

  constructor(call: SetBuyerRateCall) {
    this._call = call;
  }
}

export class FinalizeCall extends EthereumCall {
  get inputs(): FinalizeCall__Inputs {
    return new FinalizeCall__Inputs(this);
  }

  get outputs(): FinalizeCall__Outputs {
    return new FinalizeCall__Outputs(this);
  }
}

export class FinalizeCall__Inputs {
  _call: FinalizeCall;

  constructor(call: FinalizeCall) {
    this._call = call;
  }
}

export class FinalizeCall__Outputs {
  _call: FinalizeCall;

  constructor(call: FinalizeCall) {
    this._call = call;
  }
}

export class UnpauseTokenCall extends EthereumCall {
  get inputs(): UnpauseTokenCall__Inputs {
    return new UnpauseTokenCall__Inputs(this);
  }

  get outputs(): UnpauseTokenCall__Outputs {
    return new UnpauseTokenCall__Outputs(this);
  }
}

export class UnpauseTokenCall__Inputs {
  _call: UnpauseTokenCall;

  constructor(call: UnpauseTokenCall) {
    this._call = call;
  }
}

export class UnpauseTokenCall__Outputs {
  _call: UnpauseTokenCall;

  constructor(call: UnpauseTokenCall) {
    this._call = call;
  }
}

export class SetInitialRateCall extends EthereumCall {
  get inputs(): SetInitialRateCall__Inputs {
    return new SetInitialRateCall__Inputs(this);
  }

  get outputs(): SetInitialRateCall__Outputs {
    return new SetInitialRateCall__Outputs(this);
  }
}

export class SetInitialRateCall__Inputs {
  _call: SetInitialRateCall;

  constructor(call: SetInitialRateCall) {
    this._call = call;
  }

  get rate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetInitialRateCall__Outputs {
  _call: SetInitialRateCall;

  constructor(call: SetInitialRateCall) {
    this._call = call;
  }
}

export class SetWalletCall extends EthereumCall {
  get inputs(): SetWalletCall__Inputs {
    return new SetWalletCall__Inputs(this);
  }

  get outputs(): SetWalletCall__Outputs {
    return new SetWalletCall__Outputs(this);
  }
}

export class SetWalletCall__Inputs {
  _call: SetWalletCall;

  constructor(call: SetWalletCall) {
    this._call = call;
  }

  get _wallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetWalletCall__Outputs {
  _call: SetWalletCall;

  constructor(call: SetWalletCall) {
    this._call = call;
  }
}

export class SetEndRateCall extends EthereumCall {
  get inputs(): SetEndRateCall__Inputs {
    return new SetEndRateCall__Inputs(this);
  }

  get outputs(): SetEndRateCall__Outputs {
    return new SetEndRateCall__Outputs(this);
  }
}

export class SetEndRateCall__Inputs {
  _call: SetEndRateCall;

  constructor(call: SetEndRateCall) {
    this._call = call;
  }

  get rate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetEndRateCall__Outputs {
  _call: SetEndRateCall;

  constructor(call: SetEndRateCall) {
    this._call = call;
  }
}

export class AddToWhitelistCall extends EthereumCall {
  get inputs(): AddToWhitelistCall__Inputs {
    return new AddToWhitelistCall__Inputs(this);
  }

  get outputs(): AddToWhitelistCall__Outputs {
    return new AddToWhitelistCall__Outputs(this);
  }
}

export class AddToWhitelistCall__Inputs {
  _call: AddToWhitelistCall;

  constructor(call: AddToWhitelistCall) {
    this._call = call;
  }

  get buyer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddToWhitelistCall__Outputs {
  _call: AddToWhitelistCall;

  constructor(call: AddToWhitelistCall) {
    this._call = call;
  }
}

export class BeginContinuousSaleCall extends EthereumCall {
  get inputs(): BeginContinuousSaleCall__Inputs {
    return new BeginContinuousSaleCall__Inputs(this);
  }

  get outputs(): BeginContinuousSaleCall__Outputs {
    return new BeginContinuousSaleCall__Outputs(this);
  }
}

export class BeginContinuousSaleCall__Inputs {
  _call: BeginContinuousSaleCall;

  constructor(call: BeginContinuousSaleCall) {
    this._call = call;
  }
}

export class BeginContinuousSaleCall__Outputs {
  _call: BeginContinuousSaleCall;

  constructor(call: BeginContinuousSaleCall) {
    this._call = call;
  }
}

export class BuyTokensCall extends EthereumCall {
  get inputs(): BuyTokensCall__Inputs {
    return new BuyTokensCall__Inputs(this);
  }

  get outputs(): BuyTokensCall__Outputs {
    return new BuyTokensCall__Outputs(this);
  }
}

export class BuyTokensCall__Inputs {
  _call: BuyTokensCall;

  constructor(call: BuyTokensCall) {
    this._call = call;
  }

  get beneficiary(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BuyTokensCall__Outputs {
  _call: BuyTokensCall;

  constructor(call: BuyTokensCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends EthereumCall {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
