// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Metric extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Metric entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Metric entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Metric", id.toString(), this);
  }

  static load(id: string): Metric | null {
    return store.get("Metric", id) as Metric | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get parcel(): i32 {
    let value = this.get("parcel");
    return value.toI32();
  }

  set parcel(value: i32) {
    this.set("parcel", Value.fromI32(value));
  }

  get estate(): i32 {
    let value = this.get("estate");
    return value.toI32();
  }

  set estate(value: i32) {
    this.set("estate", Value.fromI32(value));
  }

  get wearable_halloween_2019(): i32 {
    let value = this.get("wearable_halloween_2019");
    return value.toI32();
  }

  set wearable_halloween_2019(value: i32) {
    this.set("wearable_halloween_2019", Value.fromI32(value));
  }

  get wearable_exclusive_masks(): i32 {
    let value = this.get("wearable_exclusive_masks");
    return value.toI32();
  }

  set wearable_exclusive_masks(value: i32) {
    this.set("wearable_exclusive_masks", Value.fromI32(value));
  }
}

export class NFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NFT entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NFT entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NFT", id.toString(), this);
  }

  static load(id: string): NFT | null {
    return store.get("NFT", id) as NFT | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    return value.toBytes();
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get category(): string | null {
    let value = this.get("category");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set category(value: string | null) {
    if (value === null) {
      this.unset("category");
    } else {
      this.set("category", Value.fromString(value as string));
    }
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get tokenURI(): string | null {
    let value = this.get("tokenURI");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenURI(value: string | null) {
    if (value === null) {
      this.unset("tokenURI");
    } else {
      this.set("tokenURI", Value.fromString(value as string));
    }
  }
}
