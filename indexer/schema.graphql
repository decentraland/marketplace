# ---------------------------------------------------------
# Counts --------------------------------------------------
# ---------------------------------------------------------

# thegraph doesn't support count operations, but we need them to paginate results
# This entity is a workaround to this issue, but it's still not enough, as we'd need counts for more complex queries
type Count @entity {
  id: ID!

  orderTotal: Int!
  orderParcel: Int!
  orderEstate: Int!
  orderWearable: Int!

  parcelTotal: Int!

  estateTotal: Int!

  wearableTotal: Int!
  wearableHalloween2019: Int!
  wearableExclusiveMasks: Int!
  wearableXmas2019: Int!
}

# ---------------------------------------------------------
# Orders --------------------------------------------------
# ---------------------------------------------------------

# thegraph doesn't support nested property searches, so we're doing promoting properties
# we need from each NFT type to the Order, in order to search for them, prefixing them with search_[nft]_[prop]
type Order @entity {
  id: ID!
  category: Category!
  nft: NFT
  nftAddress: Bytes!
  txHash: Bytes!
  owner: Bytes!
  buyer: Bytes
  price: BigInt!
  status: OrderStatus!
  blockNumber: BigInt!
  expiresAt: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
}

# ---------------------------------------------------------
# Bids ----------------------------------------------------
# ---------------------------------------------------------

type Bid @entity {
  id: ID!
  category: Category!
  nft: NFT
  nftAddress: Bytes!
  bidder: Bytes
  seller: Bytes
  price: BigInt!
  fingerprint: Bytes
  status: OrderStatus!
  blockNumber: BigInt!
  expiresAt: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
}

# ---------------------------------------------------------
# NFTs ----------------------------------------------------
# ---------------------------------------------------------

# aka LAND
type Parcel @entity {
  id: ID!
  tokenId: BigInt!
  owner: Account!
  x: BigInt!
  y: BigInt!
  estate: Estate
  data: Data
  rawData: String
}

type Estate @entity {
  id: ID!
  tokenId: BigInt!
  owner: Account!
  parcels: [Parcel!]
  size: Int
  data: Data
  rawData: String
}

type Data @entity {
  id: ID!
  parcel: Parcel
  estate: Estate
  version: String!
  name: String
  description: String
  ipns: String
}

type Wearable @entity {
  id: ID!
  owner: Account!
  representationId: String!
  collection: String!
  name: String!
  description: String!
  category: WearableCategory!
  rarity: WearableRarity!
  bodyShapes: [WearableBodyShape!]
}

type NFT @entity {
  id: ID!
  tokenId: BigInt!
  contractAddress: Bytes!
  category: Category!
  owner: Account!
  tokenURI: String

  orders: [Order!] @derivedFrom(field: "nft") # History of all orders. Should only ever be ONE open order. all others must be cancelled or sold
  bids: [Bid!] @derivedFrom(field: "nft") # History of all bids.
  activeOrder: Order

  name: String
  image: String

  parcel: Parcel
  estate: Estate
  wearable: Wearable
  createdAt: BigInt!
  updatedAt: BigInt!

  # search indexes
  searchOrderStatus: OrderStatus
  searchOrderPrice: BigInt
  searchOrderExpiresAt: BigInt
  searchOrderCreatedAt: BigInt

  searchIsLand: Boolean

  searchParcelX: BigInt
  searchParcelY: BigInt

  searchEstateSize: Int

  searchIsWearableAccessory: Boolean
  searchWearableCategory: WearableCategory
  searchWearableRarity: WearableRarity
  searchWearableBodyShapes: [WearableBodyShape!]
}

# ---------------------------------------------------------
# Account (user) -------------------------------------------
# ---------------------------------------------------------

type Account @entity {
  id: ID! # ETH addr
  address: Bytes!
  nfts: [NFT!] @derivedFrom(field: "owner")
  mana: BigInt # Amount of mana owned
}

# ---------------------------------------------------------
# Enums ---------------------------------------------------
# ---------------------------------------------------------

enum Category @entity {
  parcel
  estate
  wearable
}

enum OrderStatus @entity {
  open
  sold
  cancelled
}

enum WearableCategory @entity {
  mask
  earring
  eyewear
  feet
  hair
  hat
  helmet
  facial_hair
  upper_body
  top_head
  lower_body
}

enum WearableRarity @entity {
  unique
  mythic
  legendary
  epic
  swanky
}

enum WearableBodyShape @entity {
  BaseFemale
  BaseMale
}
